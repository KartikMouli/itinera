// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== AUTHENTICATION ==========
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  preferences   Json?     // Theme, language preferences

  // Relations
  accounts      Account[]
  sessions      Session[]
  trips         Trip[]

  @@map("users")
}

// ========== TRIP MANAGEMENT ==========
model Trip {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TripStatus @default(PLANNING)
  startDate   DateTime
  endDate     DateTime
  budget      Float
  currency    String     @default("INR")
  fromCity    String     // Starting location
  toCity      String     // Destination
  mode        TravelMode // Mode of travel
  
  // Relations
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  itinerary   Itinerary? // One-to-one relation with itinerary

  @@map("trips")
}

model Itinerary {
  id          String   @id @default(cuid())
  content     String   @db.Text // Gemini-generated itinerary content
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  tripId      String   @unique
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("itineraries")
}

// ========== ENUMS ==========
enum TripStatus {
  PLANNING
  UPCOMING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TravelMode {
  FLIGHT
  TRAIN
  BUS
  CAR
  BIKE
  WALK
}
